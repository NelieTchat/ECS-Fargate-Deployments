AWSTemplateFormatVersion: '2010-09-09'

Description: Create an ECs Cluster

Parameters:
  VpcId:
    Description: VPC ID
    Type: AWS::EC2::VPC::Id
    Default: vpc-0d9fab734b1a6143a

  PublicSubnet1:
    Description: Subnet ID
    Type: AWS::EC2::Subnet::Id
    Default: subnet-0b455b136100c5753

  PublicSubnet2:
    Description: Subnet ID
    Type: AWS::EC2::Subnet::Id
    Default: subnet-01ad738cfdc2f0b80

Resources:
  MyECSFargateCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: MyECSFargateCluster
      Tags:
        - Key: Name
          Value: MyECSFargateCluster
  MyALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: MyALB
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      SecurityGroups:
        - !Ref MySecurityGroup
      Scheme: internet-facing
      Tags:
        - Key: Name
          Value: MyALB

  MyListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref MyFargateTargetGroup
      LoadBalancerArn: !Ref MyALB
      Port: 80
      Protocol: HTTP

  MyFargateTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: MyFargateTargetGroup
      VpcId: !Ref VpcId
      Port: 80
      Protocol: HTTP
      TargetType: ip

  MySecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable SSH, HTTP, and HTTPS access
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80  # Allow inbound traffic on port 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIp: 0.0.0.0/0
      VpcId: !Ref VpcId

Outputs:
  ClusterName:
    Description: Name of the ECS Cluster
    Value: !Ref MyECSFargateCluster
    Export:
      Name: !Sub "${AWS::StackName}-MyECSFargateCluster"


  ExportedPublicSubnet1:
    Description: Public subnet 1
    Value: !Ref PublicSubnet1
    Export:
      Name: !Sub "${AWS::StackName}-PublicSubnet1"

  ExportedPublicSubnet2:
    Description: Public subnet 2
    Value: !Ref PublicSubnet2
    Export:
      Name: !Sub "${AWS::StackName}-PublicSubnet2"

  LoadBalancerDNS:
    Description: DNS name of the ALB
    Value: !GetAtt MyALB.DNSName

  ExportedSecurityGroup:
    Description: Security group ID
    Value: !GetAtt MySecurityGroup.GroupId
    Export:
      Name: !Sub "${AWS::StackName}-SecurityGroup"

  ExportedTargetGroup:
    Description: Target group ARN
    Value: !Ref MyFargateTargetGroup
    Export:
      Name: !Sub "${AWS::StackName}-TargetGroup"