AWSTemplateFormatVersion: '2010-09-09'

Description: Create an ECs Cluster with EC2 Launch Type

Parameters:
  InstanceType:
    Description: EC2 instance type
    Type: String
    Default: t2.micro
    AllowedValues:
      - t2.micro
      - t2.medium
      - t2.large
      - t2.xlarge
      - t2.2xlarge
    ConstraintDescription: Must be a valid EC2 instance type

  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: Must be the name of an existing EC2 KeyPair.
    Default: DevOps_key_Pair

  VpcId:
    Description: VPC ID
    Type: AWS::EC2::VPC::Id
    Default: vpc-0d9fab734b1a6143a

  PublicSubnet1:
    Description: Subnet ID
    Type: AWS::EC2::Subnet::Id
    Default: subnet-0b455b136100c5753

  PublicSubnet2:
    Description: Subnet ID
    Type: AWS::EC2::Subnet::Id
    Default: subnet-01ad738cfdc2f0b80

  ImageId:
    Description: Latest AMI ID for the desired Amazon Machine Image (AMI)
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2

  SSMRole:
    Description: ARN of the IAM role for Systems Manager (SSM)
    Type: String
    Default: arn:aws:iam::767397897837:instance-profile/EcsTaskRole 

Resources:
  MyECSEc2Cluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: MyECSEc2Cluster
      Tags:
        - Key: Name
          Value: MyECSEc2Cluster
  MyALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: MyALB
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      SecurityGroups:
        - !Ref MySecurityGroup
      Scheme: internet-facing
      Tags:
        - Key: Name
          Value: MyALB

  MyListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref MyTargetGroup
      LoadBalancerArn: !Ref MyALB
      Port: 80
      Protocol: HTTP

  MyTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: MyTargetGroup
      VpcId: !Ref VpcId
      Port: 80
      Protocol: HTTP
      TargetType: instance

  MySecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable SSH, HTTP, and HTTPS access
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80  # Allow inbound traffic on port 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIp: 0.0.0.0/0
      VpcId: !Ref VpcId

# The ASG , LT and capacity provider are specific to the EC2 launch type.

  MyCapacityProvider:  # Define capacity provider for EC2 instances. Only for Ec2 not Fargate
    Type: AWS::ECS::CapacityProvider
    Properties:
      Name: MyCapacityProviderName
      AutoScalingGroupProvider:
        AutoScalingGroupArn: !Ref MyEC2ASG

  MyEC2ASG:  # Auto Scaling Group for EC2 instances
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      MinSize: 1  # Minimum number of instances
      MaxSize: 4  # Maximum number of instances
      VPCZoneIdentifier:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      LaunchTemplate:  # Reference launch template for EC2 configuration
        LaunchTemplateId: !Ref MyEC2LaunchTemplate
        Version: '1'
      TargetGroupARNs:
        - !Ref MyTargetGroup

  MyEC2LaunchTemplate:  # Define launch template for EC2 instances
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: MyEC2LaunchTemplate
      LaunchTemplateData: 
        UserData: !Base64 |  # Optional user data script
          #!/bin/bash
          echo "Hello, World!"
        ImageId: !Ref ImageId
        InstanceType: !Ref InstanceType
        KeyName: !Ref KeyName
        IamInstanceProfile: 
          Arn: !Ref SSMRole 
        SecurityGroupIds:
          - !GetAtt MySecurityGroup.GroupId

Outputs:
  ClusterName:
    Description: Name of the ECS Cluster
    Value: !Ref MyECSEc2Cluster
    Export:
      Name: !Sub "${AWS::StackName}-MyECSEc2Cluster"

  ExportedPublicSubnet1:
    Description: Public subnet 1
    Value: !Ref PublicSubnet1
    Export:
      Name: !Sub "${AWS::StackName}-PublicSubnet1"

  ExportedPublicSubnet2:
    Description: Public subnet 2
    Value: !Ref PublicSubnet2
    Export:
      Name: !Sub "${AWS::StackName}-PublicSubnet2"

  LoadBalancerDNS:
    Description: DNS name of the ALB
    Value: !GetAtt MyALB.DNSName

  ExportedSecurityGroup:
    Description: Security group ID
    Value: !GetAtt MySecurityGroup.GroupId
    Export:
      Name: !Sub "${AWS::StackName}-SecurityGroup"

  ExportedTargetGroup:
    Description: Target group ARN
    Value: !Ref MyTargetGroup
    Export:
      Name: !Sub "${AWS::StackName}-TargetGroup"